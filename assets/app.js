// Initialize Firebase
var config = {
    apiKey: "AIzaSyAiqedcuwlanvn7xCgrRs0yJyOf4G6ceCE",
    authDomain: "rps-game-81763.firebaseapp.com",
    databaseURL: "https://rps-game-81763.firebaseio.com",
    projectId: "rps-game-81763",
    storageBucket: "",
    messagingSenderId: "817026141804"
};
firebase.initializeApp(config);
//make a database variable
let db = firebase.database();
//declare variables
let userName;
let dataRef;
let userRef;
let lobbyRef;
//grab the firebase connections reference
let userCons = db.ref('.info/connected');
//make a reference for my lobbies folder on the database
let lobbies = db.ref('/lobbies');
userCons.on("value", function(userList){
    if(userList.val()) {
        //see how many lobbies there are or if there's any
        lobbies.once("value").then(function(lobbiesSnap){
            //if no lobbies, make the first lobby
            if(lobbiesSnap.numChildren() === 0) {
                //make a lobby and push to it to create a user
                let con = db.ref('/lobbies/lobby' + Date.now()).push("meatball");
                //assign reference for this lobby
                lobbyRef = db.ref('/lobbies/' + con.path.n[1]);
                //assign reference for this user's data
                userRef = db.ref('/lobbies/' + con.path.n[1] + '/' + con.path.n[2]);
                //assign a username based off key generated by firebase for userdata folder in lobby
                userName = con.path.n[2].slice(14)
                //add default player name
                changeName(userName);
                //assign ref for data for this lobby
                dataRef = db.ref('/lobbyData/dataFor' + con.path.n[1]);
                //remove this user from lobby when disconnect
                con.onDisconnect().remove();
                //clear all lobby data when this user disconnects
                dataRef.onDisconnect().remove();
                assignChat();                
                chatPrint(userName, "is connected");

            } else {
                let lobbied = false;
                lobbiesSnap.forEach(function(lobbyUsers){
                    if (lobbyUsers.numChildren() === 1) {
                        //add to here, then return true to break forEach
                        let con = lobbyUsers.ref.push("mama");
                        con.onDisconnect().remove();
                        userRef = db.ref('/lobbies/' + con.path.n[1] + '/' + con.path.n[2]);
                        userName = con.path.n[2].slice(14)
                        changeName(userName);
                        dataRef = db.ref('/lobbyData/dataFor' + con.path.n[1]);
                        dataRef.onDisconnect().remove();
                        lobbied = true;
                        assignChat();                        
                        chatPrint(userName, "is connected");                                     
                        return true;
                    }
                });
                //create new lobby
                if(!lobbied) {
                    let con = db.ref('/lobbies/lobby' + Date.now()).push("conan");
                    con.onDisconnect().remove();
                    lobbyRef = db.ref('/lobbies/' + con.path.n[1]);
                    userRef = db.ref('/lobbies/' + con.path.n[1] + '/' + con.path.n[2]);
                    userName = con.path.n[2].slice(14)
                    changeName(userName);
                    dataRef = db.ref('/lobbyData/dataFor' + con.path.n[1]);
                    dataRef.onDisconnect().remove();
                    assignChat();                    
                    chatPrint(userName, "is connected");                               
                }//end if lobbied
            }//end else
        }); //end lobbies.once
    
    } //end if userList.val
}); //end userCons call

//chat listener function
$('#enter').on("click", function(event){
    event.preventDefault();
    let str = $('#textInput').val().trim();
    chatPrint(userName, str);
    $('#textInput').val("");
});

function changeName(str) {
    userName = str;
    userRef.update({
        name: userName
    });
}

function assignChat() {
    dataRef.child('chat').on("value", function(snap){
        chatUpdate(snap.val().msgBy, snap.val().lastMsg);
    });
}

function chatPrint(name, str) {
    str = parseInput(str);
    if(str !== false) {
        dataRef.child('chat').update({
            lastMsg: str,
            msgBy: name
        });
    }//end if
}
function chatUpdate(name, str) {
    let chatBox = $('#chat');
    // chatBox.append('<p>' + name + ': ' + str + '</p>');
    $('<li>').html(name + ': ' + str).prependTo(chatBox);
}
 
function roll(num) {
    let sides = 20;
    if(arguments.length == 1) {
        sides = num;
    }
    return Math.floor(Math.random() * sides) + 1;
}

//this function handles user chat input by calling fx based on if the user entered a string that starts with /
function parseInput(str) {
    if(str.startsWith('/')) {
        let index = str.indexOf(" ");
        let command;
        if(index == -1) {
            command = str.slice(1);
        } else {
            command = str.slice(1, index)
        }
        let helpText = "<span id='sysMsg'><br>Commands:<br>/help : get list of commands<br>/name -new name- : change user name<br>/roll # : rolls a # sided die (if # omitted, # is 20)</span>";
        switch(command) {
            case "name":
                let newName = str.slice(index + 1);
                if(index == -1) {
                    chatUpdate("System", "<span id='sysMsg'>Usage: /name -new name- : change user name</span>");
                    return false;
                } else {
                    changeName(newName);
                    return "<span id='sysMsg'>name changed to " + newName + "</span>";
                }
            break;
            case "roll":
                if(index == -1) {
                    return "<span id='sysMsg'>Rolled a 20 sided die! Result: " + roll() + "</span>";
                } else {
                    let int = parseInt(str.slice(index + 1));
                    if(isNaN(int)) {
                        chatUpdate("System", "<span id='sysMsg'>Usage: /roll # : rolls a # sided die</span>");
                        return false;
                    } else {
                        return "<span id='sysMsg'>Rolled a " + int + " sided die! Result: " + roll(int) + "</span>";                        
                    }
                }
            break;
            case "help":
                chatUpdate("System", helpText);
                return false;
            break;
            default:
                chatUpdate("System", "<span id='sysMsg'>try /help for commands</span>");
                return false;
            break;
        }
    } else {
        return str;
    }
}